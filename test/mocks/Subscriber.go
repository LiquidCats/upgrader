// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriber creates a new instance of MockSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriber {
	mock := &MockSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriber is an autogenerated mock type for the Subscriber type
type MockSubscriber struct {
	mock.Mock
}

type MockSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriber) EXPECT() *MockSubscriber_Expecter {
	return &MockSubscriber_Expecter{mock: &_m.Mock}
}

// Channel provides a mock function for the type MockSubscriber
func (_mock *MockSubscriber) Channel(opts ...redis.ChannelOption) <-chan *redis.Message {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(opts)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 <-chan *redis.Message
	if returnFunc, ok := ret.Get(0).(func(...redis.ChannelOption) <-chan *redis.Message); ok {
		r0 = returnFunc(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}
	return r0
}

// MockSubscriber_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type MockSubscriber_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
//   - opts
func (_e *MockSubscriber_Expecter) Channel(opts ...interface{}) *MockSubscriber_Channel_Call {
	return &MockSubscriber_Channel_Call{Call: _e.mock.On("Channel",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockSubscriber_Channel_Call) Run(run func(opts ...redis.ChannelOption)) *MockSubscriber_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[0].([]redis.ChannelOption)
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockSubscriber_Channel_Call) Return(messageCh <-chan *redis.Message) *MockSubscriber_Channel_Call {
	_c.Call.Return(messageCh)
	return _c
}

func (_c *MockSubscriber_Channel_Call) RunAndReturn(run func(opts ...redis.ChannelOption) <-chan *redis.Message) *MockSubscriber_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockSubscriber
func (_mock *MockSubscriber) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriber_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubscriber_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSubscriber_Expecter) Close() *MockSubscriber_Close_Call {
	return &MockSubscriber_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSubscriber_Close_Call) Run(run func()) *MockSubscriber_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriber_Close_Call) Return(err error) *MockSubscriber_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriber_Close_Call) RunAndReturn(run func() error) *MockSubscriber_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type MockSubscriber
func (_mock *MockSubscriber) Unsubscribe(ctx context.Context, channels ...string) error {
	var tmpRet mock.Arguments
	if len(channels) > 0 {
		tmpRet = _mock.Called(ctx, channels)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = returnFunc(ctx, channels...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriber_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockSubscriber_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx
//   - channels
func (_e *MockSubscriber_Expecter) Unsubscribe(ctx interface{}, channels ...interface{}) *MockSubscriber_Unsubscribe_Call {
	return &MockSubscriber_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockSubscriber_Unsubscribe_Call) Run(run func(ctx context.Context, channels ...string)) *MockSubscriber_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockSubscriber_Unsubscribe_Call) Return(err error) *MockSubscriber_Unsubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriber_Unsubscribe_Call) RunAndReturn(run func(ctx context.Context, channels ...string) error) *MockSubscriber_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}
