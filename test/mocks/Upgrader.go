// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	"github.com/gorilla/websocket"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUpgrader creates a new instance of MockUpgrader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpgrader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpgrader {
	mock := &MockUpgrader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpgrader is an autogenerated mock type for the Upgrader type
type MockUpgrader struct {
	mock.Mock
}

type MockUpgrader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpgrader) EXPECT() *MockUpgrader_Expecter {
	return &MockUpgrader_Expecter{mock: &_m.Mock}
}

// Upgrade provides a mock function for the type MockUpgrader
func (_mock *MockUpgrader) Upgrade(w http.ResponseWriter, r *http.Request, responseHeader http.Header) (*websocket.Conn, error) {
	ret := _mock.Called(w, r, responseHeader)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 *websocket.Conn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, http.Header) (*websocket.Conn, error)); ok {
		return returnFunc(w, r, responseHeader)
	}
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, http.Header) *websocket.Conn); ok {
		r0 = returnFunc(w, r, responseHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, http.Header) error); ok {
		r1 = returnFunc(w, r, responseHeader)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpgrader_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type MockUpgrader_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - w
//   - r
//   - responseHeader
func (_e *MockUpgrader_Expecter) Upgrade(w interface{}, r interface{}, responseHeader interface{}) *MockUpgrader_Upgrade_Call {
	return &MockUpgrader_Upgrade_Call{Call: _e.mock.On("Upgrade", w, r, responseHeader)}
}

func (_c *MockUpgrader_Upgrade_Call) Run(run func(w http.ResponseWriter, r *http.Request, responseHeader http.Header)) *MockUpgrader_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(http.Header))
	})
	return _c
}

func (_c *MockUpgrader_Upgrade_Call) Return(conn *websocket.Conn, err error) *MockUpgrader_Upgrade_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *MockUpgrader_Upgrade_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, responseHeader http.Header) (*websocket.Conn, error)) *MockUpgrader_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}
